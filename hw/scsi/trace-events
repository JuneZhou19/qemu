# See docs/devel/tracing.txt for syntax documentation.

# hw/scsi/scsi-bus.c
scsi_req_alloc(int target, int lun, int tag) "target %d lun %d tag %d"
scsi_req_cancel(int target, int lun, int tag) "target %d lun %d tag %d"
scsi_req_data(int target, int lun, int tag, int len) "target %d lun %d tag %d len %d"
scsi_req_data_canceled(int target, int lun, int tag, int len) "target %d lun %d tag %d len %d"
scsi_req_dequeue(int target, int lun, int tag) "target %d lun %d tag %d"
scsi_req_continue(int target, int lun, int tag) "target %d lun %d tag %d"
scsi_req_continue_canceled(int target, int lun, int tag) "target %d lun %d tag %d"
scsi_req_parsed(int target, int lun, int tag, int cmd, int mode, int xfer) "target %d lun %d tag %d command %d dir %d length %d"
scsi_req_parsed_lba(int target, int lun, int tag, int cmd, uint64_t lba) "target %d lun %d tag %d command %d lba %"PRIu64
scsi_req_parse_bad(int target, int lun, int tag, int cmd) "target %d lun %d tag %d command %d"
scsi_req_build_sense(int target, int lun, int tag, int key, int asc, int ascq) "target %d lun %d tag %d key 0x%02x asc 0x%02x ascq 0x%02x"
scsi_device_set_ua(int target, int lun, int key, int asc, int ascq) "target %d lun %d key 0x%02x asc 0x%02x ascq 0x%02x"
scsi_report_luns(int target, int lun, int tag) "target %d lun %d tag %d"
scsi_inquiry(int target, int lun, int tag, int cdb1, int cdb2) "target %d lun %d tag %d page 0x%02x/0x%02x"
scsi_test_unit_ready(int target, int lun, int tag) "target %d lun %d tag %d"
scsi_request_sense(int target, int lun, int tag) "target %d lun %d tag %d"

# hw/scsi/mptsas.c
mptsas_command_complete(void *dev, uint32_t ctx, uint32_t status, uint32_t resid) "dev %p context 0x%08x status 0x%x resid %d"
mptsas_diag_read(void *dev, uint32_t addr, uint32_t val) "dev %p addr 0x%08x value 0x%08x"
mptsas_diag_write(void *dev, uint32_t addr, uint32_t val) "dev %p addr 0x%08x value 0x%08x"
mptsas_irq_intx(void *dev, int level) "dev %p level %d"
mptsas_irq_msi(void *dev) "dev %p "
mptsas_mmio_read(void *dev, uint32_t addr, uint32_t val) "dev %p addr 0x%08x value 0x%x"
mptsas_mmio_unhandled_read(void *dev, uint32_t addr) "dev %p addr 0x%08x"
mptsas_mmio_unhandled_write(void *dev, uint32_t addr, uint32_t val) "dev %p addr 0x%08x value 0x%x"
mptsas_mmio_write(void *dev, uint32_t addr, uint32_t val) "dev %p addr 0x%08x value 0x%x"
mptsas_process_message(void *dev, int msg, uint32_t ctx) "dev %p cmd %d context 0x%08x\n"
mptsas_process_scsi_io_request(void *dev, int bus, int target, int lun, uint64_t len) "dev %p dev %d:%d:%d length %"PRIu64""
mptsas_reset(void *dev) "dev %p "
mptsas_scsi_overflow(void *dev, uint32_t ctx, uint64_t req, uint64_t found) "dev %p context 0x%08x: %"PRIu64"/%"PRIu64""
mptsas_sgl_overflow(void *dev, uint32_t ctx, uint64_t req, uint64_t found) "dev %p context 0x%08x: %"PRIu64"/%"PRIu64""
mptsas_unhandled_cmd(void *dev, uint32_t ctx, uint8_t msg_cmd) "dev %p context 0x%08x: Unhandled cmd 0x%x"
mptsas_unhandled_doorbell_cmd(void *dev, int cmd) "dev %p value 0x%08x"

# hw/scsi/mptconfig.c
mptsas_config_sas_device(void *dev, int address, int port, int phy_handle, int dev_handle, int page) "dev %p address %d (port %d, handles: phy %d dev %d) page %d"
mptsas_config_sas_phy(void *dev, int address, int port, int phy_handle, int dev_handle, int page) "dev %p address %d (port %d, handles: phy %d dev %d) page %d"

# hw/scsi/megasas.c
megasas_init_firmware(uint64_t pa) "pa 0x%" PRIx64 " "
megasas_init_queue(uint64_t queue_pa, int queue_len, uint64_t head, uint64_t tail, uint32_t flags) "queue at 0x%" PRIx64 " len %d head 0x%" PRIx64 " tail 0x%" PRIx64 " flags 0x%x"
megasas_initq_map_failed(int frame) "scmd %d: failed to map queue"
megasas_initq_mapped(uint64_t pa) "queue already mapped at 0x%" PRIx64
megasas_initq_mismatch(int queue_len, int fw_cmds) "queue size %d max fw cmds %d"
megasas_qf_mapped(unsigned int index) "skip mapped frame 0x%x"
megasas_qf_new(unsigned int index, uint64_t frame) "frame 0x%x addr 0x%" PRIx64
megasas_qf_busy(unsigned long pa) "all frames busy for frame 0x%lx"
megasas_qf_enqueue(unsigned int index, unsigned int count, uint64_t context, unsigned int head, unsigned int tail, int busy) "frame 0x%x count %d context 0x%" PRIx64 " head 0x%x tail 0x%x busy %d"
megasas_qf_update(unsigned int head, unsigned int tail, unsigned int busy) "head 0x%x tail 0x%x busy %d"
megasas_qf_map_failed(int cmd, unsigned long frame) "scmd %d: frame %lu"
megasas_qf_complete_noirq(uint64_t context) "context 0x%" PRIx64 " "
megasas_qf_complete(uint64_t context, unsigned int head, unsigned int tail, int busy) "context 0x%" PRIx64 " head 0x%x tail 0x%x busy %d"
megasas_frame_busy(uint64_t addr) "frame 0x%" PRIx64 " busy"
megasas_unhandled_frame_cmd(int cmd, uint8_t frame_cmd) "scmd %d: MFI cmd 0x%x"
megasas_handle_scsi(const char *frame, int bus, int dev, int lun, void *sdev, unsigned long size) "%s dev %x/%x/%x sdev %p xfer %lu"
megasas_scsi_target_not_present(const char *frame, int bus, int dev, int lun) "%s dev %x/%x/%x"
megasas_scsi_invalid_cdb_len(const char *frame, int bus, int dev, int lun, int len) "%s dev %x/%x/%x invalid cdb len %d"
megasas_iov_read_overflow(int cmd, int bytes, int len) "scmd %d: %d/%d bytes"
megasas_iov_write_overflow(int cmd, int bytes, int len) "scmd %d: %d/%d bytes"
megasas_iov_read_underflow(int cmd, int bytes, int len) "scmd %d: %d/%d bytes"
megasas_iov_write_underflow(int cmd, int bytes, int len) "scmd %d: %d/%d bytes"
megasas_scsi_req_alloc_failed(const char *frame, int dev, int lun) "%s dev %x/%x"
megasas_scsi_read_start(int cmd, int len) "scmd %d: transfer %d bytes of data"
megasas_scsi_write_start(int cmd, int len) "scmd %d: transfer %d bytes of data"
megasas_scsi_nodata(int cmd) "scmd %d: no data to be transferred"
megasas_scsi_complete(int cmd, uint32_t status, int len, int xfer) "scmd %d: status 0x%x, len %u/%u"
megasas_command_complete(int cmd, uint32_t status, uint32_t resid) "scmd %d: status 0x%x, residual %d"
megasas_handle_io(int cmd, const char *frame, int dev, int lun, unsigned long lba, unsigned long count) "scmd %d: %s dev %x/%x lba 0x%lx count %lu"
megasas_io_target_not_present(int cmd, const char *frame, int dev, int lun) "scmd %d: %s dev 1/%x/%x LUN not present"
megasas_io_read_start(int cmd, unsigned long lba, unsigned long count, unsigned long len) "scmd %d: start LBA 0x%lx %lu blocks (%lu bytes)"
megasas_io_write_start(int cmd, unsigned long lba, unsigned long count, unsigned long len) "scmd %d: start LBA 0x%lx %lu blocks (%lu bytes)"
megasas_io_complete(int cmd, uint32_t len) "scmd %d: %d bytes"
megasas_iovec_sgl_overflow(int cmd, int index, int limit) "scmd %d: iovec count %d limit %d"
megasas_iovec_sgl_underflow(int cmd, int index) "scmd %d: iovec count %d"
megasas_iovec_sgl_invalid(int cmd, int index, uint64_t pa, uint32_t len) "scmd %d: element %d pa 0x%" PRIx64 " len %u"
megasas_iovec_overflow(int cmd, int len, int limit) "scmd %d: len %d limit %d"
megasas_iovec_underflow(int cmd, int len, int limit) "scmd %d: len %d limit %d"
megasas_handle_dcmd(int cmd, int opcode) "scmd %d: MFI DCMD opcode 0x%x"
megasas_finish_dcmd(int cmd, int size) "scmd %d: MFI DCMD wrote %d bytes"
megasas_dcmd_req_alloc_failed(int cmd, const char *desc) "scmd %d: %s"
megasas_dcmd_internal_submit(int cmd, const char *desc, int dev) "scmd %d: %s to dev %d"
megasas_dcmd_internal_finish(int cmd, int opcode, int lun) "scmd %d: cmd 0x%x lun %d"
megasas_dcmd_internal_invalid(int cmd, int opcode) "scmd %d: DCMD 0x%x"
megasas_dcmd_unhandled(int cmd, int opcode, int len) "scmd %d: opcode 0x%x, len %d"
megasas_dcmd_zero_sge(int cmd) "scmd %d: zero DCMD sge count"
megasas_dcmd_invalid_sge(int cmd, int count) "scmd %d: DCMD sge count %d"
megasas_dcmd_invalid_xfer_len(int cmd, unsigned long size, unsigned long max) "scmd %d: xfer len %ld, max %ld"
megasas_dcmd_enter(int cmd, const char *dcmd, int len) "scmd %d: DCMD %s len %d"
megasas_dcmd_dummy(int cmd, unsigned long size) "scmd %d: xfer len %ld"
megasas_dcmd_set_fw_time(int cmd, unsigned long time) "scmd %d: Set FW time 0x%lx"
megasas_dcmd_pd_get_list(int cmd, int num, int max, int offset) "scmd %d: DCMD PD get list: %d / %d PDs, size %d"
megasas_dcmd_ld_get_list(int cmd, int num, int max) "scmd %d: DCMD LD get list: found %d / %d LDs"
megasas_dcmd_ld_get_info(int cmd, int ld_id) "scmd %d: dev %d"
megasas_dcmd_ld_list_query(int cmd, int flags) "scmd %d: query flags 0x%x"
megasas_dcmd_pd_get_info(int cmd, int pd_id) "scmd %d: dev %d"
megasas_dcmd_pd_list_query(int cmd, int flags) "scmd %d: query flags 0x%x"
megasas_dcmd_reset_ld(int cmd, int target_id) "scmd %d: dev %d"
megasas_dcmd_unsupported(int cmd, unsigned long size) "scmd %d: set properties len %ld"
megasas_abort_frame(int cmd, int abort_cmd) "scmd %d: frame 0x%x"
megasas_abort_no_cmd(int cmd, uint64_t context) "scmd %d: no active command for frame context 0x%" PRIx64
megasas_abort_invalid_context(int cmd, uint64_t context, int abort_cmd) "scmd %d: invalid frame context 0x%" PRIx64 " for abort frame 0x%x"
megasas_reset(int fw_state) "firmware state 0x%x"
megasas_init(int sges, int cmds, const char *mode) "Using %d sges, %d cmds, %s mode"
megasas_msix_raise(int vector) "vector %d"
megasas_msi_raise(int vector) "vector %d"
megasas_irq_lower(void) "INTx"
megasas_irq_raise(void) "INTx"
megasas_intr_enabled(void) "Interrupts enabled"
megasas_intr_disabled(void) "Interrupts disabled"
megasas_msix_enabled(int vector) "vector %d"
megasas_msi_enabled(int vector) "vector %d"
megasas_mmio_readl(const char *reg, uint32_t val) "reg %s: 0x%x"
megasas_mmio_invalid_readl(unsigned long addr) "addr 0x%lx"
megasas_mmio_writel(const char *reg, uint32_t val) "reg %s: 0x%x"
megasas_mmio_invalid_writel(uint32_t addr, uint32_t val) "addr 0x%x: 0x%x"

# hw/scsi/mpt3sas.c
mpt3sas_irq_int(int level) "level %d"
mpt3sas_clear_reply_descriptor_int(uint32_t status) "status 0x%08x"
mpt3sas_set_fault(uint32_t code) "fault code 0x%x"
mpt3sas_post_reply_error(uint32_t free_queue_ioc, uint32_t free_queue_host, uint32_t reply_post_ioc, uint32_t reply_post_host) "Resource unavailable.reply free queue 0x%x/0x%x reply post queue 0x%x/0x%x"
mpt3sas_reply_free_queue(uint32_t ioc_index, uint32_t host_index) "current free reply queue head 0x%x tail 0x%x"
mpt3sas_reply_post_queue(uint8_t index, uint64_t base, uint32_t host_index, uint32_t ioc_index) "current queue index %d base 0x%lx reply post queue head 0x%x tail 0x%x"
mpt3sas_reply_free_queue_ioc_update(uint32_t ioc_index, uint32_t host_index) "ioc updated free queue ioc index. free reply queue ioc index %#x host index %#x"
mpt3sas_reply_post_queue_ioc_update(uint8_t index, uint64_t base, uint32_t ioc_index, uint32_t host_index) "ioc updated reply descriptor post queue ioc index. queue index %d base 0x%lx reply post queue ioc index %#x host index %#x"
mpt3sas_reply_free_queue_host_update(uint32_t ioc_index, uint32_t host_index) "host updated free queue host index. free reply queue ioc index %#x host index %#x"
mpt3sas_reply_post_queue_host_update(uint8_t index, uint64_t base, uint32_t ioc_index, uint32_t host_index) "host updated reply descriptor post queue host index. queue index %d base 0x%lx reply post queue ioc index %#x host index %#x"
mpt3sas_reply_post_queue_full(void) "reply post queue is full."
mpt3sas_reply_frame_address(uint64_t addr) "reply frame address 0x%lx"
mpt3sas_post_reply_completed(uint16_t smid) "request (0x%x) completed."
mpt3sas_trigger_event(uint32_t event) "send event 0x%x"
mpt3sas_unhandled_event(uint32_t event) "unhandled event 0x%x"
mpt3sas_ioc_init(uint32_t system_req_frame_size, uint32_t rdp_depth, uint32_t rfq_depth, uint64_t srfba, uint64_t rdpq_addr, uint64_t rfq_addr, uint32_t sr_addr_hi) "SRF size 0x%x RDQ depth %d RFQ depth %d SRFBA 0x%lx RDPQ addr 0x%lx RFQ addr 0x%lx SRA hi 0x%x"

mpt3sas_handle_config(uint16_t action, uint16_t page_type, uint16_t pange_num, uint16_t page_len, uint16_t page_ver, uint16_t ext_page_type, uint16_t ext_page_len, uint32_t page_addr) "action(0x%x) page type(0x%x) number(0x%x) len(0x%x) ver(0x%x) ext. page type(0x%x) len(0x%x) page address(0x%08x)"
mpt3sas_ieee_sgl_build_table(void *req, uint32_t length, uint32_t offset) "request %p data length 0x%x chain offset 0x%x"
mpt3sas_ieee_sgl_add_simple_element(uint64_t addr, uint32_t length, uint8_t flag) "adding addr 0x%lx length 0x%x flags 0x%x"
mpt3sas_ieee_sgl_add_chain_element(uint64_t sgaddr, uint32_t sglen, uint8_t flag) "next sgl table addr 0x%lx sg len 0x%x flags 0x%x"
mpt3sas_ieee_sgl_zero_len(const char *s, uint64_t addr, uint8_t flags) "warning: this is a zero len %s sg table addr 0x%lx flags 0x%x"
mpt3sas_scsi_io_request(uint16_t dev_handle, int lun, int skip_count, int len, int bi_len, uint8_t ioflags, uint8_t eedpflags, uint16_t eedpblock_size, uint32_t control, uint16_t smid) "dev handle 0x%04x lun 0x%x skip_count 0x%x len 0x%x bidirectional data len 0x%x io flags 0x%x eedp flags 0x%x eedp block size 0x%x control 0x%x smid 0x%04x"
mpt3sas_scsi_io_command_info(void *req, uint8_t command, uint16_t smid) "request %p command 0x%02x smid 0x%04x"
mpt3sas_scsi_task_management(int task_type, uint16_t smid) "task type 0x%x task mid 0x%04x"
mpt3sas_handle_message(int function) "message function 0x%x"
mpt3sas_soft_reset(void) "mpt3sas soft reset"
mpt3sas_handle_request(const char *request_desc, uint16_t smid, uint8_t msix_index, uint8_t function, uint32_t size) "request %s smid 0x%04x msix index 0x%02x function 0x%x size 0x%x"
mpt3sas_mmio_read(const char *reg_desc, int len, uint32_t val) "read [%s] len 0x%x val 0x%x"
mpt3sas_mmio_write(const char *reg_desc, int len, uint64_t val) "write [%s] len 0x%x val 0x%lx"
mpt3sas_scsi_io_command_sense_data(int sense_code, int sk, int asc, int ascq) "sense code 0x%x sk/asc/ascq (%02x/%02x/%02x)"
mpt3sas_scsi_io_command_error(uint64_t wwn, void *req, int command, uint16_t smid, int status) "scsi device 0x%lx request %p command 0x%02x smid 0x%04x completed with errors(status 0x%x)."
mpt3sas_scsi_io_command_completed(void *req, uint16_t smid, int command, uint64_t total_commands) "request %p smid 0x%04x command 0x%02x complete successfully. completed 0x%lx"
mpt3sas_scsi_io_add_command(void *req, int command, uint16_t smid, uint64_t lba) "adding request %p smid 0x%04x command 0x%02x lba 0x%lx into completed queue"
mpt3sas_scsi_command_cdb(int len, char *s) "cdb%d: %s"
mpt3sas_scsi_io_error(uint32_t status) "SCSI IO error (status 0x%x)"
mpt3sas_event_add_device(void *dev, uint16_t dev_handle, uint8_t scsi_id, uint8_t phy_id) "Attaching scsi device %p device handle 0x%x scsi id %d phy id %d"
mpt3sas_scsi_device_list(void *dev, uint32_t channel, uint32_t scsi_id, uint32_t lun) "scsi device %p channel %d scsi_id %d lun %d"
mpt3sas_interrupt_coalescing(uint32_t processed) "interrupt coalescing number 0x%x"
mpt3sas_msix_notify(uint8_t vector) "send msix interrupt vector 0x%x"
mpt3sas_config_page_write(uint32_t type, uint32_t number, uint64_t address, int page_len) "dma write page type 0x%x number 0x%x data to 0x%lx len 0x%x"
mpt3sas_config_write(uint32_t address, uint32_t val, int len) "address 0x%x val 0x%x len 0x%x"
mpt3sas_config_read(uint32_t address, uint32_t val, int len) "address 0x%x val 0x%x len 0x%x"
mpt3sas_handle_event_ack(uint16_t smid, uint16_t event_type, uint32_t event_context) "handle event ack smid 0x%x event type 0x%x event context 0x%x"
mpt3sas_handle_ioc_facts(void) "handle ioc facts"
mpt3sas_handle_fw_upload(uint16_t smid, uint8_t msix_index, uint8_t image_type, uint8_t chain_offset) "FWUploaad smid 0x%x msix_index 0x%x image type 0x%x chain offset 0x%x"
mpt3sas_handle_config_invalid_page(uint16_t action, uint16_t page_type, uint16_t pange_num, uint16_t page_len, uint16_t page_ver, uint16_t ext_page_type, uint16_t ext_page_len, uint32_t page_addr) "action(0x%x) page type(0x%x) number(0x%x) len(0x%x) ver(0x%x) ext. page type(0x%x) len(0x%x) page address(0x%08x)"
mpt3sas_handle_config_error(uint16_t action, uint16_t page_type, uint16_t pange_num, uint16_t page_len, uint16_t page_ver, uint16_t ext_page_type, uint16_t ext_page_len, uint32_t page_addr, uint32_t iocstatus) "action(0x%x) page type(0x%x) number(0x%x) len(0x%x) ver(0x%x) ext. page type(0x%x) len(0x%x) page address(0x%08x), iocstatus(0x%04x)"
mpt3sas_handle_config_sas_device_0(uint32_t form, uint32_t handle) "sas device page0 form 0x%x handle 0x%x"
mpt3sas_handle_config_sas_phy_0(uint32_t form, uint32_t handle) "sas phy page0 form 0x%x handle 0x%x"
mpt3sas_handle_smp_passthrough(uint8_t flags, uint8_t physical_port, uint16_t length, uint8_t sgl_flags, uint64_t address) "passthrough flags 0x%x physical port 0x%x request data length 0x%x sgl flags 0x%x sas address 0x%lx"
mpt3sas_handle_smp_frame(uint8_t type, uint8_t function, uint64_t addr, uint32_t len) "smp frame type 0x%x function 0x%x frame address 0x%lx length 0x%x"
mpt3sas_unhandled_smp_frame(uint8_t type, uint8_t function) "unhanded smp frame type 0x%x function 0x%x"
mpt3sas_handle_sas_io_unit_control(uint8_t operation, uint8_t function, uint16_t dev_handle, uint8_t phy, uint8_t lookup, uint64_t addr) "sas io unit control operation %#x function %#x dev handle %#x phy %#x lookup method %#x lookup address %#lx"
mpt3sas_query_scsi_target_info(uint16_t device_handle, uint8_t phy, uint64_t addr) "device handle 0x%x phy id 0x%x sas address 0x%lx"
mpt3sas_scsi_io_overrun(uint64_t wwn, uint32_t control, uint32_t data_len, uint32_t xfer, uint32_t mode) "scsi device 0x%lx scsi request control 0x%x data length 0x%x qemu scsi command xfer 0x%x mode 0x%x"
mpt3sas_dump_buffer(const char *buf) "%s"
mpt3sas_config_sas_exp_pg0_dev_handle_address(uint16_t dev_handle, int address) "get dev handle: %#x from page address: %#x"
mpt3sas_hotplug(uint64_t dev, uint32_t scsi_id) "hotplug on wwn %#lx, scsi_id: %d"
mpt3sas_hotunplug(uint64_t dev, uint32_t scsi_id) "hotunplug from wwn %#lx, scsi_id: %d"
mpt3sas_sas_topology_change(const char *stat, int i, uint64_t prev_wwn, uint64_t curr_wwn) "%s on scsi_id: %d, %#lx > %#lx"
mpt3sas_sas_expander_config_page_1(uint8_t expander_idx, uint8_t phy_id) "expander %d phy id %d"
mpt3sas_init_expander(uint32_t count, uint32_t all_phys, uint32_t upstream_start_phy, uint32_t upstream_phys, uint32_t expansion_start_phy, uint32_t expansion_phys, uint32_t downstream_start_phy, uint32_t downstream_end_phy, uint32_t downstream_phys) "Expander count %d expander all phys %d upstream start phy %d upstream phys %d expansion start phy %d expansion phys %d downstream start phy %d downstream_end_phy %d downstream phys %d"
mpt3sas_handle_scsi_task_management_terminate(uint8_t task_type, uint32_t termination_count, uint32_t cur_count) "task type %#x termination count %d cur count %d"
mpt3sas_handle_scsi_task_management_resp_code(uint8_t task_type, uint32_t resp_code) "task type %#x response code %#x"


# hw/scsi/vmw_pvscsi.c
pvscsi_ring_init_data(uint32_t txr_len_log2, uint32_t rxr_len_log2) "TX/RX rings logarithms set to %d/%d"
pvscsi_ring_init_msg(uint32_t len_log2) "MSG ring logarithm set to %d"
pvscsi_ring_flush_cmp(uint64_t filled_cmp_ptr) "new production counter of completion ring is 0x%"PRIx64
pvscsi_ring_flush_msg(uint64_t filled_cmp_ptr) "new production counter of message ring is 0x%"PRIx64
pvscsi_update_irq_level(bool raise, uint64_t mask, uint64_t status) "interrupt level set to %d (MASK: 0x%"PRIx64", STATUS: 0x%"PRIx64")"
pvscsi_update_irq_msi(void) "sending MSI notification"
pvscsi_cmp_ring_put(unsigned long addr) "got completion descriptor 0x%lx"
pvscsi_msg_ring_put(unsigned long addr) "got message descriptor 0x%lx"
pvscsi_complete_request(uint64_t context, uint64_t len, uint8_t sense_key) "completion: ctx: 0x%"PRIx64", len: 0x%"PRIx64", sense key: %u"
pvscsi_get_sg_list(int nsg, size_t size) "get SG list: depth: %u, size: %zu"
pvscsi_get_next_sg_elem(uint32_t flags) "unknown flags in SG element (val: 0x%x)"
pvscsi_command_complete_not_found(uint32_t tag) "can't find request for tag 0x%x"
pvscsi_command_complete_data_run(void) "not all data required for command transferred"
pvscsi_command_complete_sense_len(int len) "sense information length is %d bytes"
pvscsi_convert_sglist(uint64_t context, unsigned long addr, uint32_t resid) "element: ctx: 0x%"PRIx64" addr: 0x%lx, len: %ul"
pvscsi_process_req_descr(uint8_t cmd, uint64_t ctx) "SCSI cmd 0x%x, ctx: 0x%"PRIx64
pvscsi_process_req_descr_unknown_device(void) "command directed to unknown device rejected"
pvscsi_process_req_descr_invalid_dir(void) "command with invalid transfer direction rejected"
pvscsi_process_io(unsigned long addr) "got descriptor 0x%lx"
pvscsi_on_cmd_noimpl(const char* cmd) "unimplemented command %s ignored"
pvscsi_on_cmd_reset_dev(uint32_t tgt, int lun, void* dev) "PVSCSI_CMD_RESET_DEVICE[target %u lun %d (dev 0x%p)]"
pvscsi_on_cmd_arrived(const char* cmd) "command %s arrived"
pvscsi_on_cmd_abort(uint64_t ctx, uint32_t tgt) "command PVSCSI_CMD_ABORT_CMD for ctx 0x%"PRIx64", target %u"
pvscsi_on_cmd_unknown(uint64_t cmd_id) "unknown command 0x%"PRIx64
pvscsi_on_cmd_unknown_data(uint32_t data) "data for unknown command 0x:0x%x"
pvscsi_io_write(const char* cmd, uint64_t val) "%s write: 0x%"PRIx64
pvscsi_io_write_unknown(unsigned long addr, unsigned sz, uint64_t val) "unknown write address: 0x%lx size: %u bytes value: 0x%"PRIx64
pvscsi_io_read(const char* cmd, uint64_t status) "%s read: 0x%"PRIx64
pvscsi_io_read_unknown(unsigned long addr, unsigned sz) "unknown read address: 0x%lx size: %u bytes"
pvscsi_init_msi_fail(int res) "failed to initialize MSI, error %d"
pvscsi_state(const char* state) "starting %s ..."
pvscsi_tx_rings_ppn(const char* label, uint64_t ppn) "%s page: 0x%"PRIx64
pvscsi_tx_rings_num_pages(const char* label, uint32_t num) "Number of %s pages: %u"

# hw/scsi/esp.c
esp_error_fifo_overrun(void) "FIFO overrun"
esp_error_unhandled_command(uint32_t val) "unhandled command (0x%2.2x)"
esp_error_invalid_write(uint32_t val, uint32_t addr) "invalid write of 0x%02x at [0x%x]"
esp_raise_irq(void) "Raise IRQ"
esp_lower_irq(void) "Lower IRQ"
esp_dma_enable(void) "Raise enable"
esp_dma_disable(void) "Lower enable"
esp_get_cmd(uint32_t dmalen, int target) "len %d target %d"
esp_do_busid_cmd(uint8_t busid) "busid 0x%x"
esp_handle_satn_stop(uint32_t cmdlen) "cmdlen %d"
esp_write_response(uint32_t status) "Transfer status (status=%d)"
esp_do_dma(uint32_t cmdlen, uint32_t len) "command len %d + %d"
esp_command_complete(void) "SCSI Command complete"
esp_command_complete_unexpected(void) "SCSI command completed unexpectedly"
esp_command_complete_fail(void) "Command failed"
esp_transfer_data(uint32_t dma_left, int32_t ti_size) "transfer %d/%d"
esp_handle_ti(uint32_t minlen) "Transfer Information len %d"
esp_handle_ti_cmd(uint32_t cmdlen) "command len %d"
esp_mem_readb(uint32_t saddr, uint8_t reg) "reg[%d]: 0x%2.2x"
esp_mem_writeb(uint32_t saddr, uint8_t reg, uint32_t val) "reg[%d]: 0x%2.2x -> 0x%2.2x"
esp_mem_writeb_cmd_nop(uint32_t val) "NOP (0x%2.2x)"
esp_mem_writeb_cmd_flush(uint32_t val) "Flush FIFO (0x%2.2x)"
esp_mem_writeb_cmd_reset(uint32_t val) "Chip reset (0x%2.2x)"
esp_mem_writeb_cmd_bus_reset(uint32_t val) "Bus reset (0x%2.2x)"
esp_mem_writeb_cmd_iccs(uint32_t val) "Initiator Command Complete Sequence (0x%2.2x)"
esp_mem_writeb_cmd_msgacc(uint32_t val) "Message Accepted (0x%2.2x)"
esp_mem_writeb_cmd_pad(uint32_t val) "Transfer padding (0x%2.2x)"
esp_mem_writeb_cmd_satn(uint32_t val) "Set ATN (0x%2.2x)"
esp_mem_writeb_cmd_rstatn(uint32_t val) "Reset ATN (0x%2.2x)"
esp_mem_writeb_cmd_sel(uint32_t val) "Select without ATN (0x%2.2x)"
esp_mem_writeb_cmd_selatn(uint32_t val) "Select with ATN (0x%2.2x)"
esp_mem_writeb_cmd_selatns(uint32_t val) "Select with ATN & stop (0x%2.2x)"
esp_mem_writeb_cmd_ensel(uint32_t val) "Enable selection (0x%2.2x)"
esp_mem_writeb_cmd_dissel(uint32_t val) "Disable selection (0x%2.2x)"

# hw/scsi/esp-pci.c
esp_pci_error_invalid_dma_direction(void) "invalid DMA transfer direction"
esp_pci_error_invalid_read(uint32_t reg) "read access outside bounds (reg 0x%x)"
esp_pci_error_invalid_write(uint32_t reg) "write access outside bounds (reg 0x%x)"
esp_pci_error_invalid_write_dma(uint32_t val, uint32_t addr) "invalid write of 0x%02x at [0x%x]"
esp_pci_dma_read(uint32_t saddr, uint32_t reg) "reg[%d]: 0x%8.8x"
esp_pci_dma_write(uint32_t saddr, uint32_t reg, uint32_t val) "reg[%d]: 0x%8.8x -> 0x%8.8x"
esp_pci_dma_idle(uint32_t val) "IDLE (0x%.8x)"
esp_pci_dma_blast(uint32_t val) "BLAST (0x%.8x)"
esp_pci_dma_abort(uint32_t val) "ABORT (0x%.8x)"
esp_pci_dma_start(uint32_t val) "START (0x%.8x)"
esp_pci_sbac_read(uint32_t reg) "sbac: 0x%8.8x"
esp_pci_sbac_write(uint32_t reg, uint32_t val) "sbac: 0x%8.8x -> 0x%8.8x"

# hw/scsi/spapr_vscsi.c
spapr_vscsi_send_rsp(uint8_t status, int32_t res_in, int32_t res_out) "status: 0x%x, res_in: %"PRId32", res_out: %"PRId32
spapr_vscsi_fetch_desc_no_data(void) "no data descriptor"
spapr_vscsi_fetch_desc_direct(void) "direct segment"
spapr_vscsi_fetch_desc_indirect(uint32_t qtag, unsigned desc, unsigned local_desc) "indirect segment local tag=0x%"PRIx32" desc#%u/%u"
spapr_vscsi_fetch_desc_out_of_range(unsigned desc, unsigned desc_offset) "#%u is ouf of range (%u bytes)"
spapr_vscsi_fetch_desc_dma_read_error(int rc) "spapr_vio_dma_read -> %d reading ext_desc"
spapr_vscsi_fetch_desc_indirect_seg_ext(uint32_t qtag, unsigned n, unsigned desc, uint64_t va, uint32_t len) "indirect segment ext. tag=0x%"PRIx32" desc#%u/%u { va=0x%"PRIx64" len=0x%"PRIx32" }"
spapr_vscsi_fetch_desc_out_of_desc(void) "Out of descriptors !"
spapr_vscsi_fetch_desc_out_of_desc_boundary(unsigned offset, unsigned desc, uint32_t len) "   offset=0x%x is out of a descriptor #%u boundary=0x%"PRIx32
spapr_vscsi_fetch_desc_done(unsigned desc_num, unsigned desc_offset, uint64_t va, uint32_t len) "   cur=%u offs=0x%x ret { va=0x%"PRIx64" len=0x%"PRIx32" }"
spapr_vscsi_srp_indirect_data(uint32_t len) "indirect segment 0x%"PRIx32" bytes"
spapr_vscsi_srp_indirect_data_rw(int writing, int rc) "spapr_vio_dma_r/w(%d) -> %d"
spapr_vscsi_srp_indirect_data_buf(unsigned a, unsigned b, unsigned c, unsigned d) "     data: %02x %02x %02x %02x..."
spapr_vscsi_srp_transfer_data(uint32_t len) "no data desc transfer, skipping 0x%"PRIx32" bytes"
spapr_vscsi_transfer_data(uint32_t tag, uint32_t len, void *req) "SCSI xfer complete tag=0x%"PRIx32" len=0x%"PRIx32", req=%p"
spapr_vscsi_command_complete(uint32_t tag, uint32_t status, void *req) "SCSI cmd complete, tag=0x%"PRIx32" status=0x%"PRIx32", req=%p"
spapr_vscsi_command_complete_sense_data1(uint32_t len, unsigned s0, unsigned s1, unsigned s2, unsigned s3, unsigned s4, unsigned s5, unsigned s6, unsigned s7) "Sense data, %d bytes: %02x %02x %02x %02x %02x %02x %02x %02x"
spapr_vscsi_command_complete_sense_data2(unsigned s8, unsigned s9, unsigned s10, unsigned s11, unsigned s12, unsigned s13, unsigned s14, unsigned s15)         "                      %02x %02x %02x %02x %02x %02x %02x %02x"
spapr_vscsi_command_complete_status(uint32_t status) "Command complete err=%"PRIu32
spapr_vscsi_save_request(uint32_t qtag, unsigned desc, unsigned offset) "saving tag=%"PRIu32", current desc#%u, offset=0x%x"
spapr_vscsi_load_request(uint32_t qtag, unsigned desc, unsigned offset) "restoring tag=%"PRIu32", current desc#%u, offset=0x%x"
spapr_vscsi_process_login(void) "Got login, sending response !"
spapr_vscsi_queue_cmd_no_drive(uint64_t lun) "Command for lun 0x%08" PRIx64 " with no drive"
spapr_vscsi_queue_cmd(uint32_t qtag, unsigned cdb, const char *cmd, int lun, int ret) "Queued command tag 0x%"PRIx32" CMD 0x%x=%s LUN %d ret: %d"
spapr_vscsi_do_crq(unsigned c0, unsigned c1) "crq: %02x %02x ..."
# ESES functionality
eses_sas_info_exp_phy_status(const char *s, uint32_t status) "%s fail, status: %d"
eses_sas_info_array_device_slot_status(const char *s, uint32_t status) "%s fail, status: %d"
eses_vphy_get_individual_conn_to_phy_mapping(uint32_t encl_type, uint8_t connector_id, uint8_t individual_lane, uint8_t phy_id) "Get conn to phy mapping: encl_type:%d conn_id:%d lane:%d phy_id:%d"
scsi_buffer_load(uint8_t buffer_id, uint32_t buffer_size, uint32_t buffer_next_offset, uint32_t buffer_data_start) "Buffer ID: %d, Buffer Size: %d, Next Offset: %x, Data Start: %d\n"
scsi_buffer_malloc(uint32_t buffer_size) "Malloc Buffer size : %d\n"
scsi_buffer_checksum_validation(uint8_t buffer_id, const char *valid) "Buffer data of ID %d is %s\n"
scsi_pointer_of_buffer_data(uint8_t buffer_id, void *ptr_buffer_data) "Pointer of buffer ID %d is %p\n"
scsi_ses_read_buffer_fail(const char *msg) "Read Buffer Fail: %s"
